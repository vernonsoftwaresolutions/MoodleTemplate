AWSTemplateFormatVersion: '2010-09-09'
# Regional Map
Mappings:
  RegionMap:
    us-east-1:
      AZ1: us-east-1a
      AZ2: us-east-1b
      AZ3: us-east-1c
    us-west-1:
      AZ1: us-west-1a
      AZ2: us-west-1b
      AZ3: us-west-1c
    us-west-2:
      AZ1: us-west-2a
      AZ2: us-west-2b
      AZ3: us-west-2c
Parameters:
  Tenant:
    Type: String
    Default: development
    Description: Tenant name
  CidrBlock:
    Type: String
    Default: 192.168.0.0/16
  #WS cidrs
  WSSN1Cidr:
    Type: String
    Default: 192.168.4.0/24
  WSSN2Cidr:
    Type: String
    Default: 192.168.5.0/24
  WSSN3Cidr:
    Type: String
    Default: 192.168.6.0/24
  #APP cidrs
  APPSN1Cidr:
    Type: String
    Default: 192.168.14.0/24
  APPSN2Cidr:
    Type: String
    Default: 192.168.15.0/24
  APPSN3Cidr:
    Type: String
    Default: 192.168.16.0/24
  ##EFS cidrs
  EFSN1Cidr:
    Type: String
    Default: 192.168.24.0/24
  EFSN2Cidr:
    Type: String
    Default: 192.168.25.0/24
  EFSN3Cidr:
    Type: String
    Default: 192.168.26.0/24
  #DB cidrs
  DBSN1Cidr:
    Type: String
    Default: 192.168.34.0/24
  DBSN2Cidr:
    Type: String
    Default: 192.168.35.0/24
  #MC cidrs
  MCSN1Cidr:
    Type: String
    Default: 192.168.44.0/24
  #Bastion cidrs
  BSTSN1Cidr:
    Type: String
    Default: 192.168.3.0/24
  #DB params
  DBInstance:
    Type: String
    Default: dbinstance
  #DBUrl:
  #  Type: String
  #  Description: Url of database
  DBName:
    Type: String
    Default: dmdb
  DBMasterUser:
    Type: String
    NoEcho: true
    Default: root
  DBMasterPassword:
    Type: String
    NoEcho: true
    Default: replaceMe
  DBIsMultiZone:
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
  #MoodleBucket:
  #  Type: String
  #  Description: S3 bucket with moodle deployable
  #MoodleVersion:
  #  Type: String
  #  Description: Moodle Version deployable
  #EBEC2Role:
  #  Type: String
  #  Description: Role assumed by Elastic Beanstalk EC2 instances
  #EBServiceRole:
  #  Type: String
  #  Description: Role assumed by Elastic Beanstalk
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      CidrBlock:
        Ref: CidrBlock
      Tags:
      - Key: Name
        Value:
          "MAIN"
  # WS routes
  WSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WSSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  WSSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WSSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  WSSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WSSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  # App routes
  APPSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: APPSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  APPSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: APPSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  APPSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: APPSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  # DB routes
  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  # EFS routes
  EFSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EFSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  EFSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EFSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  EFSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EFSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  # ElastiCache routes
  MCSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: MCSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  ##
  # Web Tier Subnets
  ##
  WSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: WSSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["WSSN1", Ref: Tenant ] ]
  WSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: WSSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["WSSN2", Ref: Tenant ] ]
  WSSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: WSSN3Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ3 ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["WSSN3", Ref: Tenant ] ]
  ##
  # Application Tier Subnets
  ##
  APPSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: APPSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["APPSN1", Ref: Tenant ] ]
  APPSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: APPSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["APPSN2", Ref: Tenant ] ]
  APPSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: APPSN3Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ3 ]
  ##
  # Database Subnet definitions
  ##
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DBSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["DBSN1", Ref: Tenant ] ]
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DBSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["DBSN2", Ref: Tenant ] ]
  ##
  # Elastic File System Subnet definitions
  ##
  EFSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: EFSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["EFSN1", Ref: Tenant ] ]
  EFSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: EFSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["EFSN2", Ref: Tenant ] ]
  EFSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: EFSN3Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ3 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["EFSN3", Ref: Tenant ] ]
  ##
  # Elastic Cache Subnet definitions
  ##
  MCSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: MCSN1Cidr
      Availabilityzone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["MCSN1", Ref: Tenant ] ]
  ##
  # Internet GateWay
  # Conditional:  Only create if VPC doesn't already exist
  # The logic is a little backwards, could be reworked
  ##
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          !Join [ "", ["IG", "MAIN" ] ]
      - Key: Tenant
        Value:
          "MAIN"
  # attach the gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: MD_PVT_ROUTE
      - Key: Tenant
        Value:
          "MAIN"
      - Key: Name
        Value:
          !Join [ "", ["RTB", "MAIN" ] ]
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          !Join [ "", ["PRT", "MAIN" ] ]
      - Key: Tenant
        Value:
          "MAIN"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
##
  # Bastion routes
  SQSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetBASTION
      RouteTableId:
        Ref: PublicRouteTable
  # 3 SQS routes not included

  # 3 APP routes not included

  # Bastion Host subnet
  SubnetBASTION:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: BSTSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
        - Key: Name
          Value: SANDBOX
  ##
  # MySQL RDS definitions
  ##
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group."
      SubnetIds:
          Ref: DBSubnet1
          Ref: DBSubnet2
      Tags:
        - Key: Name
          Value: !Join [ "", ["RDSSNG", Ref: Tenant ] ]
        - Key: Tenant
          Value:
            Ref: Tenant
  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      # Resource Definition
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      BackupRetentionPeriod: 7
      Engine: MySQL
      DBParameterGroupName:
        Ref: BarracudaParameterGroup
      DBInstanceIdentifier:
        Ref: DBInstance
      DBName:
        Ref: DBName
      #
      # Stub Credentials
      # will work on shifting to IAM user later
      #
      MasterUsername:
        Ref: DBMasterUser
      MasterUserPassword:
        Ref: DBMasterPassword
      #
      # placement
      #
      PubliclyAccessible: false
      MultiAZ:
        Ref: DBIsMultiZone
      DBSubnetGroupName:
        Ref: RDSDBSubnetGroup
      Tags:
        - Key: Name
          Value: !Join [ "", ["RDS", Ref: Tenant ] ]
        - Key: Tenant
          Value:
            Ref: Tenant
  BarracudaParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Barracuda Moodle parameter group
      Family: MySQL5.6
      Parameters:
        innodb_large_prefix: 1
        innodb_file_format: Barracuda
  ##
  # Elastic Beanstalk Application Definition:
  ##
  #MoodleApplication:
  #  Type: AWS::ElasticBeanstalk::Application
  #  Properties:
  #    ApplicationName: Moodle Application
  #    Description: Elastic Beanstalk Application
  ##
  # Initial Moodle Application Version
  ##
  #MoodleAppVersion:
  #  Type: AWS::ElasticBeanstalk::ApplicationVersion
  #  Properties:
  #    ApplicationName:
  #      Ref: MoodleApplication
  #    Description: Initial Moodle App Version
  #    SourceBundle:
  #      S3Bucket:
  #        Fn::Join:
  #          - "-"
  #          -
  #            - Ref: MoodleBucket
  #            - Ref: "AWS::Region"
  #      S3Key:
  #        Ref: MoodleVersion
  ##
  # Moodle elastic beanstalk environment
  ##
  #MoodleEnvironment:
  #  Type: AWS::ElasticBeanstalk::Environment
  #  Properties:
  #    ApplicationName:
  #      Ref: MoodleApplication
  #    Description: !Sub AWS Elastic Beanstalk Environment running ${Tenant}
  #    EnvironmentName:
  #      Ref: Tenant
  #    SolutionStackName: "64bit Amazon Linux 2016.09 v2.5.2 running Docker 1.12.6"
  #    OptionSettings:
  #      -
  #        Namespace: aws:elasticbeanstalk:application:environment
  #        OptionName: DATABASENAME
  #        Value:
  #          Ref: DBName
  #      -
  #        Namespace: aws:elasticbeanstalk:application:environment
  #        OptionName: DATABASEURL
  #        Value:
  #          Ref: DBUrl
  #      -
  #        Namespace: aws:elasticbeanstalk:application:environment
  #        OptionName: DATABASEUSER
  #        Value:
  #          Ref: DBMasterUser
  #      -
  #        Namespace: aws:elasticbeanstalk:application:environment
  #        OptionName: DATABASEPASSWORD
  #        Value:
  #          Ref: DBMasterPassword
  #      -
  #        Namespace: aws:elasticbeanstalk:application:environment
  #        OptionName: EBURL
  #        Value: !Sub ${Tenant}.${AWS::Region}.elasticbeanstalk.com
  #      -
  #        Namespace: aws:autoscaling:launchconfiguration
  #        OptionName: IamInstanceProfile
  #        Value:
  #          Ref: EBEC2Role
  #      -
  #        Namespace: aws:elasticbeanstalk:environment
  #        OptionName: ServiceRole
  #        Value:
  #          Ref: EBServiceRole
  #      -
  #        Namespace: aws:ec2:vpc
  #        OptionName: VPCId
  #        Value:
  #          Ref: VPC
  #      -
  #        Namespace: aws:ec2:vpc
  #        OptionName: Subnets
  #        Value:
  #          Fn::Join:
  #            - ", "
  #            -
  #              - Ref: APPSubnet1
  #              - Ref: APPSubnet2
  #              - Ref: APPSubnet3
  #      -
  #        Namespace: aws:ec2:vpc
  #        OptionName: ELBSubnets
  #        Value:
  #          Fn::Join:
  #            - ", "
  #            -
  #              - Ref: WSSubnet1
  #              - Ref: WSSubnet2
  #              - Ref: WSSubnet3
  #      -
  #        Namespace: aws:ec2:vpc
  #        OptionName: ELBScheme
  #        Value: external
  #      -
  #        Namespace: aws:autoscaling:launchconfiguration
  #        OptionName: InstanceType
  #        Value: t2.micro
  #      -
  #        Namespace: aws:autoscaling:launchconfiguration
  #        OptionName: ImageId
          # todo-update to have region map
  #        Value: ami-57dc2f41

  #    Tags:
  #    - Key: Name
  #      Value:
  #        Ref: Tenant
  #    VersionLabel:
  #      Ref: MoodleAppVersion
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value: !Join [ "", ["EFS", Ref: Tenant ] ]
      - Key: Tenant
        Value:
          Ref: Tenant
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: EFSubnet1
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: EFSubnet2
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  MountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: EFSubnet3
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  ECSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet GroupDescription
      SubnetIds:
        Ref: MCSubnet1
  ElasticacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elasticache Security Group
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "11211"
          ToPort: "11211"
      VpcId:
        Ref: VPC
  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      Engine: memcached
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:
        Ref: ECSubnetGroup
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        -
          Fn::GetAtt:
            - "ElasticacheSecurityGroup"
            - "GroupId"
Outputs:
  VPC:
    Description: Main VPC
    Value: !Ref VPC
    Export:
      Name: "MAIN"
  PublicRouteTable:
    Description: Public Route Table of Main VPC
    Value: !Ref PublicRouteTable
    Export:
      Name: "PublicRouteTable"
  PrivateRouteTable:
    Description: Private Route Table of Main VPC
    Value: !Ref PrivateRouteTable
    Export:
      Name: "PrivateRouteTable"
  BastionSubnet:
    Description: BastionSubnet Id
    Value: !Ref SubnetBASTION
    Export:
      Name: BastionSubnet
  DBSubnet1:
    Description: DBSubnet1 Id
    Value: !Ref DBSubnet1
    Export:
      Name: !Join [ "", ["DBSubnet1", Ref: Tenant ] ]
  DBSubnet2:
    Description: DBSubnet2 Id
    Value: !Ref DBSubnet2
    Export:
      Name: !Join [ "", ["DBSubnet2", Ref: Tenant ] ]
  EFSubnet1:
    Description: EFSubnet1 Id
    Value: !Ref EFSubnet1
    Export:
      Name: !Join [ "", ["EFSubnet1", Ref: Tenant ] ]
  EFSubnet2:
    Description: EFSubnet2 Id
    Value: !Ref EFSubnet2
    Export:
      Name: !Join [ "", ["EFSubnet2", Ref: Tenant ] ]
  EFSubnet3:
    Description: EFSubnet3 Id
    Value: !Ref EFSubnet3
    Export:
      Name: !Join [ "", ["EFSubnet3", Ref: Tenant ] ]
  MCSubnet1:
    Description: MCSubnet1 Id
    Value: !Ref MCSubnet1
    Export:
      Name: !Join [ "", ["MCSubnet1", Ref: Tenant ] ]
  APPSubnet1:
    Description: APPSubnet1 Id
    Value: !Ref APPSubnet1
    Export:
      Name: !Join [ "", ["APPSubnet1", Ref: Tenant ] ]
  APPSubnet2:
    Description: APPSubnet2 Id
    Value: !Ref APPSubnet2
    Export:
      Name: !Join [ "", ["APPSubnet2", Ref: Tenant ] ]
  APPSubnet3:
    Description: APPSubnet3 Id
    Value: !Ref APPSubnet3
    Export:
      Name: !Join [ "", ["APPSubnet3", Ref: Tenant ] ]
  WSSubnet1:
    Description: WSSubnet1 Id
    Value: !Ref WSSubnet1
    Export:
      Name: !Join [ "", ["WSSubnet1", Ref: Tenant ] ]
  WSSubnet2:
    Description: WSSubnet2 Id
    Value: !Ref WSSubnet2
    Export:
      Name: !Join [ "", ["WSSubnet2", Ref: Tenant ] ]
  WSSubnet3:
    Description: WSSubnet3 Id
    Value: !Ref WSSubnet3
    Export:
      Name: !Join [ "", ["WSSubnet3", Ref: Tenant ] ]
  DBUrl:
    Description: DB Url endpoint
    Value: !GetAtt RDSDB.Endpoint.Address
  EFSRef:
    Description: Elastic File System Reference
    Value: !Ref FileSystem
  CacheEndpoint:
    Description: Endpoint for memcached instance
    Value: !GetAtt ElasticacheCluster.ConfigurationEndpoint.Address
  CachePort:
    Description: Endpoint for memcached instance
    Value: !GetAtt ElasticacheCluster.ConfigurationEndpoint.Port
