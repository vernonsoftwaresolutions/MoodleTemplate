# aws cloudformation package --template-file moodletemplate.yaml --output-template-file moodletemplate-output.yaml --s3-bucket moodle-deployables
# aws cloudformation deploy --template-file moodletemplate-output.yaml --capabilities CAPABILITY_IAM --stack-name jenkins --parameter-overrides Tenant=Company! DBInstance=moodle DBName=moodle InstanceType=t2.micro DBIsMultiZone=false KeyName=SANDBOX CertBucket=moodle-deployables HostedZoneName=vssdevelopment.com. MoodleDNSName=moodle.vssdevelopment.com


AWSTemplateFormatVersion: '2010-09-09'
# Regional Map
Mappings:
  ImageMap:
    us-east-1:
      ami: ami-841f46ff
    us-west-2:
      ami: ami-718c6909
  RegionMap:
    us-east-1:
      AZ1: us-east-1a
      AZ2: us-east-1b
      AZ3: us-east-1c
    us-west-1:
      AZ1: us-west-1a
      AZ2: us-west-1b
      AZ3: us-west-1c
    us-west-2:
      AZ1: us-west-2a
      AZ2: us-west-2b
      AZ3: us-west-2c
Parameters:
  Tenant:
    Type: String
    Default: development
    Description: Tenant name
  CidrBlock:
    Type: String
    Default: 192.168.0.0/16
  #WS cidrs
  WSSN1Cidr:
    Type: String
    Default: 192.168.4.0/24
  WSSN2Cidr:
    Type: String
    Default: 192.168.5.0/24
  WSSN3Cidr:
    Type: String
    Default: 192.168.6.0/24
  #APP cidrs
  APPSN1Cidr:
    Type: String
    Default: 192.168.14.0/24
  APPSN2Cidr:
    Type: String
    Default: 192.168.15.0/24
  APPSN3Cidr:
    Type: String
    Default: 192.168.16.0/24
  ##EFS cidrs
  EFSN1Cidr:
    Type: String
    Default: 192.168.24.0/24
  EFSN2Cidr:
    Type: String
    Default: 192.168.25.0/24
  EFSN3Cidr:
    Type: String
    Default: 192.168.26.0/24
  #DB cidrs
  DBSN1Cidr:
    Type: String
    Default: 192.168.34.0/24
  DBSN2Cidr:
    Type: String
    Default: 192.168.35.0/24
  #MC cidrs
  MCSN1Cidr:
    Type: String
    Default: 192.168.44.0/24
  #Bastion cidrs
  BSTSN1Cidr:
    Type: String
    Default: 192.168.3.0/24
  #DB params
  DBInstance:
    Type: String
    Default: dbinstance
  #DBUrl:
  #  Type: String
  #  Description: Url of database
  DBName:
    Type: String
    Default: dmdb
  DBMasterUser:
    Type: String
    NoEcho: true
    Default: root
  DBMasterPassword:
    Type: String
    NoEcho: true
    Default: replaceMe
  DBIsMultiZone:
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CertBucket:
    Type: String
    Description: S3 bucket that contains certificates
  InstanceType:
    Type: String
  HostedZoneName:
    Type: String
    Description: Name of hosted zone
  MoodleDNSName:
    Type: String
    Description: Moodle DNS Name

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      CidrBlock:
        Ref: CidrBlock
      Tags:
      - Key: Name
        Value:
          "MAIN"
  # WS routes
  WSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WSSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  WSSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WSSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  WSSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WSSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  # App routes
  APPSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: APPSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  APPSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: APPSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  APPSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: APPSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  # DB routes
  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DBSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  # EFS routes
  EFSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EFSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  EFSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EFSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  EFSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EFSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  # ElastiCache routes
  MCSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: MCSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  ##
  # Web Tier Subnets
  ##
  WSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: WSSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["WSSN1", Ref: Tenant ] ]
  WSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: WSSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["WSSN2", Ref: Tenant ] ]
  WSSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: WSSN3Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ3 ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["WSSN3", Ref: Tenant ] ]
  ##
  # Application Tier Subnets
  ##
  APPSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: APPSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["APPSN1", Ref: Tenant ] ]
  APPSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: APPSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["APPSN2", Ref: Tenant ] ]
  APPSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: APPSN3Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ3 ]
  ##
  # Database Subnet definitions
  ##
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DBSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["DBSN1", Ref: Tenant ] ]
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DBSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["DBSN2", Ref: Tenant ] ]
  ##
  # Elastic File System Subnet definitions
  ##
  EFSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: EFSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["EFSN1", Ref: Tenant ] ]
  EFSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: EFSN2Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ2 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["EFSN2", Ref: Tenant ] ]
  EFSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: EFSN3Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ3 ]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["EFSN3", Ref: Tenant ] ]
  ##
  # Elastic Cache Subnet definitions
  ##
  MCSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: MCSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1]
      Tags:
      - Key: Tenant
        Value:
          Ref: Tenant
      - Key: Name
        Value:
          !Join [ "", ["MCSN1", Ref: Tenant ] ]
  ##
  # Internet GateWay
  # Conditional:  Only create if VPC doesn't already exist
  # The logic is a little backwards, could be reworked
  ##
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          !Join [ "", ["IG", "MAIN" ] ]
      - Key: Tenant
        Value:
          "MAIN"
  # attach the gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: MD_PVT_ROUTE
      - Key: Tenant
        Value:
          "MAIN"
      - Key: Name
        Value:
          !Join [ "", ["RTB", "MAIN" ] ]
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          !Join [ "", ["PRT", "MAIN" ] ]
      - Key: Tenant
        Value:
          "MAIN"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
##
  # Bastion routes
  SQSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetBASTION
      RouteTableId:
        Ref: PublicRouteTable
  # 3 SQS routes not included

  # 3 APP routes not included

  # Bastion Host subnet
  SubnetBASTION:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: BSTSN1Cidr
      AvailabilityZone:
        !FindInMap [ RegionMap, !Ref "AWS::Region", AZ1 ]
      Tags:
        - Key: Name
          Value: SANDBOX
  ##
  # MySQL RDS definitions
  ##
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group."
      SubnetIds:
      - Ref: DBSubnet1
      - Ref: DBSubnet2
      Tags:
        - Key: Name
          Value: !Join [ "", ["RDSSNG", Ref: Tenant ] ]
        - Key: Tenant
          Value:
            Ref: Tenant
  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
    #
      # Resource Definition
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      BackupRetentionPeriod: 7
      Engine: MySQL
      DBParameterGroupName:
        Ref: BarracudaParameterGroup
      DBInstanceIdentifier:
        Ref: DBInstance
      VPCSecurityGroups:
        - !Ref DBAccessSecurityGroup
      DBName:
        Ref: DBName
      #
      # Stub Credentials
      # will work on shifting to IAM user later
      #
      MasterUsername:
        Ref: DBMasterUser
      MasterUserPassword:
        Ref: DBMasterPassword
      #
      # placement
      #
      PubliclyAccessible: false
      MultiAZ:
        Ref: DBIsMultiZone
      DBSubnetGroupName:
        Ref: RDSDBSubnetGroup
      Tags:
        - Key: Name
          Value: !Join [ "", ["RDS", Ref: Tenant ] ]
        - Key: Tenant
          Value:
            Ref: Tenant
  BarracudaParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Barracuda Moodle parameter group
      Family: MySQL5.6
      Parameters:
        innodb_large_prefix: 1
        innodb_file_format: Barracuda

  WebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebAccessSecurityGroup
      GroupDescription: "Security Group for web access"
      Tags:
        - Key: Name
          Value: WebAccessSecurityGroup
      VpcId:
        Ref: VPC

  WebAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: WebAccessSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId:
        Ref: WebAccessSecurityGroup

  WorldAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WorldAccessSecurityGroup
      GroupDescription: Security Group for Web Access to Moodle ELB
      #World accessible
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
      Tags:
        - Key: ENV
          Value: PROD
      VpcId:
        Ref: VPC

 # Elastic Load Balancer Defintiion for Moodle
  MoodleDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Ref: HostedZoneName
      Comment: Zone apex alias targeted to DockerDTRLoadBalancer.
      RecordSets:
      - Name:
          !Join [".", [ !Ref MoodleDNSName , ""]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt MoodleLoadBalancer.CanonicalHostedZoneNameID
          DNSName: !GetAtt MoodleLoadBalancer.DNSName

  MoodleLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - !Ref WebAccessSecurityGroup
      - !Ref WorldAccessSecurityGroup
      Scheme: internet-facing
      Subnets:
      - !Ref WSSubnet1
      - !Ref WSSubnet2
      - !Ref WSSubnet3
      Instances:
      - Ref: MoodleInstance
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: TCP
        InstanceProtocol: TCP
      Tags:
      - Key: ENV
        Value: PROD

  MoodleInstance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId:
        !FindInMap [ ImageMap, !Ref "AWS::Region", ami ]
      KeyName:
        Ref: KeyName
      InstanceType:
        Ref: InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref MountTargetSecurityGroup
            - !Ref ElasticacheSecurityGroup
            - !Ref WebAccessSecurityGroup
            - !Ref DBAccessSecurityGroup
          SubnetId:
            Ref: WSSubnet1
      IamInstanceProfile:
        Ref: MoodleProfile
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash


          #### MOUNT EFS
          echo "mounting efs"
          sudo apt-get -y install nfs-common
          mkdir -p /var/moodledata
          chown -R www-data:www-data /var/moodledata
          chmod -R 777 /var/moodledata
          echo "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/moodledata nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
          mount -a -t nfs4
          echo "efs mounting complete"

          # Keep upstart from complaining
          # RUN dpkg-divert --local --rename --add /sbin/initctl
          # RUN ln -sf /bin/true /sbin/initctl
          #todo- REFACTOR THIS DON'T WANT THIS PERMISSIONS!!
          chmod 755 /var/www
          chown apache2 /var/www
         
          # Let the container know that there is no tty
          export DEBIAN_FRONTEND=noninteractive

          set -x
          ENV_FILE=/root/env.sh
          echo "In the userdata script"
          mkdir -p `dirname $ENV_FILE`
          cat << EOF > $ENV_FILE
       
          export IMAGE_BUCKET=ElastixData
          export OUTPUT_BUCKET=regdata0813
          EOF
          chmod +x $ENV_FILE
         
          #ADD ./foreground.sh /etc/apache2/foreground.sh

          apt-get update && \
            apt-get -y install mysql-client pwgen python-setuptools curl git unzip apache2 php5 \
              php5-gd libapache2-mod-php5 postfix wget supervisor php5-pgsql curl libcurl3 \
              libcurl3-dev php5-curl php5-xmlrpc php5-intl php5-mysql git-core && \
            cd /tmp && \
            git clone -b MOODLE_29_STABLE git://git.moodle.org/moodle.git --depth=1 && \
            #todo MOODLE_33_STABLE
            mv /tmp/moodle/* /var/www/html/ && \
            rm /var/www/html/index.html && \
            chown -R www-data:www-data /var/www/html && \
          #	chmod +x /etc/apache2/foreground.sh
          #todo- REFACTOR THIS DON'T WANT THIS PERMISSIONS!!
          chmod 777 /var/www
          # Enable SSL, moodle requires it
          a2enmod ssl && a2ensite default-ssl 
          # if using proxy, don't need actually secure connection          
          #use sed to make config configuration
          sudo apt-get install python-pip -y
          sudo pip install awscli
          sudo aws s3 cp s3://moodle-deployables/config.php /var/www/html/config.php --region us-west-2

          sudo sed -ie "s/<DATABASEURL>/${RDSDB.Endpoint.Address}/" /var/www/html/config.php 
          sudo sed -ie "s/<DATABASENAME>/${DBName}/" /var/www/html/config.php
          sudo sed -ie "s/<DATABASEUSER>/${DBMasterUser}/" /var/www/html/config.php
          sudo sed -ie "s/<DATABASEPASSWORD>/${DBMasterPassword}/" /var/www/html/config.php
          sudo sed -ie "s/<WWWROOT>/${MoodleDNSName}/" /var/www/html/config.php
          sudo sed -ie "s/<MEMCACHED_URL_PORT>/${ElasticacheCluster.ConfigurationEndpoint.Address}:${ElasticacheCluster.ConfigurationEndpoint.Port}/" /var/www/html/config.php


          read pid cmd state ppid pgrp session tty_nr tpgid rest < /proc/self/stat
          trap "kill -TERM -$pgrp; exit" EXIT TERM KILL SIGKILL SIGTERM SIGQUIT

          source /etc/apache2/envvars
          tail -F /var/log/apache2/* &
          exec apache2 -D FOREGROUND

  CertS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "s3JenkinsCertpolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:PutObject"
                Resource:
                  !Sub arn:aws:s3:::${CertBucket}/*
              -
                Effect: "Allow"
                Action: "s3:GetObject"
                Resource:
                  !Sub arn:aws:s3:::${CertBucket}/*
              -
                Effect: "Allow"
                Action: "s3:ListObjects"
                #todo-this just seems wrong to me
                # from https://forums.aws.amazon.com/message.jspa?messageID=701604
                Resource: "*"
              -
                Effect: "Allow"
                Action: "s3:DeleteObject"
                Resource:
                  !Sub arn:aws:s3:::${CertBucket}/*
              -
                #todo-this also seems wrong to me
                #https://stackoverflow.com/questions/33319678/why-is-my-terminal-returning-this-s3-error
                Sid: AllowListingOfAllBuckets
                Effect: Allow
                Action:
                - s3:ListAllMyBuckets
                Resource:
                - arn:aws:s3:::*

  #Instance Profile for the EC2 Instance to assume
  MoodleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: CertS3Role

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MountTargetSecurityGroup
      GroupDescription: Security group for mount target
      Tags:
        - Key: Name
          Value: MountTargetSecurityGroup
      VpcId:
        Ref: VPC

  MountTargetIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: MountTargetSecurityGroup
      IpProtocol: tcp
      FromPort: '2049'
      ToPort: '2049'
      SourceSecurityGroupId:
        Ref: MountTargetSecurityGroup

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value: !Join [ "", ["EFS", Ref: Tenant ] ]
      - Key: Tenant
        Value:
          Ref: Tenant
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: EFSubnet1
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: EFSubnet2
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  MountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: EFSubnet3
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  ECSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Cache Subnet GroupDescription
      SubnetIds:
      - Ref: MCSubnet1

  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      Engine: memcached
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:
        Ref: ECSubnetGroup
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        -
          Fn::GetAtt:
            - "ElasticacheSecurityGroup"
            - "GroupId"


  ElasticacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ElasticacheSecurityGroup
      GroupDescription: "Security Group for memcached access"
      Tags:
        - Key: Name
          Value: ElasticacheSecurityGroup
      VpcId:
        Ref: VPC

  ElasticacheIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ElasticacheSecurityGroup
      IpProtocol: tcp
      FromPort: '11211'
      ToPort: '11211'
      SourceSecurityGroupId:
        Ref: ElasticacheSecurityGroup

  DBAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DBAccessSecurityGroup
      GroupDescription: "Security Group for db access"
      Tags:
        - Key: Name
          Value: DBAccessSecurityGroup
      VpcId:
        Ref: VPC

  DBAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: DBAccessSecurityGroup
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId:
        Ref: DBAccessSecurityGroup
Outputs:
  VPC:
    Description: Main VPC
    Value: !Ref VPC
    Export:
      Name: "MAIN"
  PublicRouteTable:
    Description: Public Route Table of Main VPC
    Value: !Ref PublicRouteTable
    Export:
      Name: "PublicRouteTable"
  PrivateRouteTable:
    Description: Private Route Table of Main VPC
    Value: !Ref PrivateRouteTable
    Export:
      Name: "PrivateRouteTable"
  BastionSubnet:
    Description: BastionSubnet Id
    Value: !Ref SubnetBASTION
    Export:
      Name: BastionSubnet
  DBSubnet1:
    Description: DBSubnet1 Id
    Value: !Ref DBSubnet1
    Export:
      Name: !Join [ "", ["DBSubnet1", Ref: Tenant ] ]
  DBSubnet2:
    Description: DBSubnet2 Id
    Value: !Ref DBSubnet2
    Export:
      Name: !Join [ "", ["DBSubnet2", Ref: Tenant ] ]
  EFSubnet1:
    Description: EFSubnet1 Id
    Value: !Ref EFSubnet1
    Export:
      Name: !Join [ "", ["EFSubnet1", Ref: Tenant ] ]
  EFSubnet2:
    Description: EFSubnet2 Id
    Value: !Ref EFSubnet2
    Export:
      Name: !Join [ "", ["EFSubnet2", Ref: Tenant ] ]
  EFSubnet3:
    Description: EFSubnet3 Id
    Value: !Ref EFSubnet3
    Export:
      Name: !Join [ "", ["EFSubnet3", Ref: Tenant ] ]
  MCSubnet1:
    Description: MCSubnet1 Id
    Value: !Ref MCSubnet1
    Export:
      Name: !Join [ "", ["MCSubnet1", Ref: Tenant ] ]
  APPSubnet1:
    Description: APPSubnet1 Id
    Value: !Ref APPSubnet1
    Export:
      Name: !Join [ "", ["APPSubnet1", Ref: Tenant ] ]
  APPSubnet2:
    Description: APPSubnet2 Id
    Value: !Ref APPSubnet2
    Export:
      Name: !Join [ "", ["APPSubnet2", Ref: Tenant ] ]
  APPSubnet3:
    Description: APPSubnet3 Id
    Value: !Ref APPSubnet3
    Export:
      Name: !Join [ "", ["APPSubnet3", Ref: Tenant ] ]
  WSSubnet1:
    Description: WSSubnet1 Id
    Value: !Ref WSSubnet1
    Export:
      Name: !Join [ "", ["WSSubnet1", Ref: Tenant ] ]
  WSSubnet2:
    Description: WSSubnet2 Id
    Value: !Ref WSSubnet2
    Export:
      Name: !Join [ "", ["WSSubnet2", Ref: Tenant ] ]
  WSSubnet3:
    Description: WSSubnet3 Id
    Value: !Ref WSSubnet3
    Export:
      Name: !Join [ "", ["WSSubnet3", Ref: Tenant ] ]
  DBUrl:
    Description: DB Url endpoint
    Value: !GetAtt RDSDB.Endpoint.Address
  EFSRef:
    Description: Elastic File System Reference
    Value: !Ref FileSystem
  # CacheEndpoint:
  #   Description: Endpoint for memcached instance
  #   Value: !GetAtt ElasticacheCluster.ConfigurationEndpoint.Address
  # CachePort:
  #   Description: Endpoint for memcached instance
  #   Value: !GetAtt ElasticacheCluster.ConfigurationEndpoint.Port
